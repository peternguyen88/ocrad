console.log('ICO Transaction v36 - Auto 3.5 - Timeout Callback!');

var defaultPageSize = 8;
var __token = $('input[name="__RequestVerificationToken"]').val();
var COIN_LIMIT = 200;

var antiCaptchaDecoded = '';
var amount_uch = 0;
var amount_coin = 0;

var stopOperation = false;
var stopAntiCaptcha = false;

var useCaptchaMapping = true;
var mappedCaptcha = '';                                                     // -- Decode Captcha using mapping function - If Wrong then stop using mapped function

var EXPOSED_LIMIT = 0;
var deathByCaptchaURL = 'http://api.dbcapi.me/api/captcha';
var startTime = 0;
var isBuying = false;

var ICOItem = function (item) {
    var self = this;
    this.Id = item.Id;
    this.TotalCoin = parseFloat(item.TotalCoin);
    this.SoldCoin = parseFloat(item.SoldCoin);
    if (this.SoldCoin > this.TotalCoin) {
        this.SoldCoin = this.TotalCoin;
    }
    this.TimeICO = item.TimeICO;
    this.TimeBuyICO = item.TimeBuyICO;
    this.OpenBuyTime = item.OpenBuyTime;
    this.OpenICOTime = item.OpenICOTime;
    this.Price = item.Price;
    this.Limit = Number(parseFloat(item.Limit).toFixed(8));
    this.TimeLeft = item.TimeLeft;
    this.BuyICO = false;
};

$('#div-buy-uch').on('hidden.bs.modal', function (e) {
    $('input[name="4amount--4coin--2ver3"]').val('');
    $('input[name="4amount--4uch--2ver3"]').val('');
});

var ICOTransaction = function () {
    var self = this;
    self.RefreshCaptcha = 0;
    self.Limit = 0;
    self.MaxBuy = 0;
    self.ICO = ko.observable();
    self.Price = ko.observable();
    self.UserWallet = ko.observable();
    self.Blockchain = 'BTC';
    self.transactionList = ko.observableArray([]);

    self.pagination = new pagination();

    self.pagination.pageChanged(function (pageIndex) {
        self.GetListTransaction(pageIndex);
    });
    this.init = function (data, userWallet) {
        EXPOSED_LIMIT = data.Limit;
        
        startTime = new Date().getTime();
        console.log('Original Time Left');
        console.log(data.TimeLeft);
        
        if(data.OpenBuyTime == 1){
            self.init2(data, userWallet);
            return;
        }
        
        datapost = {};
        $.ajax({
            url: 'https://ucoincash.co/ICO/Buy',
            data: datapost,
            type: "get",
            contentType: "application/json;charset=utf-8",
            beforeSend: function () {
                console.log('Try Getting New Time Left');
            },
            success: function (resultData) {
                //console.log(resultData);
                
                // Update New Token
                var newToken = resultData.substring(resultData.indexOf('<input name="__RequestVerificationToken" type="hidden" value="') + 62);
                newToken = newToken.substring(0, newToken.indexOf('"'));
                //console.log(newToken);
                __token = newToken;
                
                // Update Time Left
                var newTimeLeft = resultData.substring(resultData.indexOf('"TimeLeft":') + 11);
                newTimeLeft = newTimeLeft.substring(0, newTimeLeft.indexOf('}'));
                newTimeLeft = parseFloat(newTimeLeft);
                
                data.TimeLeft = newTimeLeft;
                self.init2(data, userWallet);
                $('#buy--ico--now').addClass('enabled');
            },
            error: function(resultData){
                self.init(data, userWallet);
            }
        });
        
    };
    
    this.init2 = function (data, userWallet) {
        var elapsed = new Date().getTime() - startTime;
        
        startTime = new Date().getTime();
        
        console.log('New Time Left');
        console.log(data.TimeLeft);
        
        console.log(data.TimeLeft + elapsed/1000);
        
        setTimeout(function(){
            console.log('Start Buy ICO');
            self.ICO().BuyICO = true;
            self.OpenBuyICO(); 
        }, data.TimeLeft * 1000);
        
        console.log('Init');
        //console.log('Token:' + __token);
        
        EXPOSED_LIMIT = data.Limit;
        
        self.Limit = data.Limit;
        self.ICO(new ICOItem(data));

        var ico_info = new xyz();

        if (data.TotalCoin > 0) {
            var percent = Number(parseFloat(data.SoldCoin * 100 / data.TotalCoin).toFixed(2));
            if (percent == 100 && data.SoldCoin < data.TotalCoin) {
                percent = 99.9999;
            }
            $('#process--ico').css('width', percent + '%').attr('aria-valuenow', percent).html(percent + '%');
        }
        var eventTime = moment(ico_info.s());//moment(moment(ico_info.s()).format("YYYY-MM-DD HH:mm:ss"), "YYYY-MM-DD HH:mm:ss");// moment(item.TimeICO);
        var currentTime = moment();// moment(moment.utc().format("YYYY-MM-DD HH:mm:ss"), "YYYY-MM-DD HH:mm:ss");
        if (data.OpenICOTime) {
            $('#buy--ico--now').removeClass('enabled');
            var diffTime = parseInt(data.TimeLeft);// eventTime.unix() - currentTime.unix();
            diffTime = diffTime < 0 ? 0 : diffTime;
			
			self.setReloadTimeout(diffTime);	                                        //// ---- Reload 5 minutes before ICO to avoid timeout
			
            var clock2 = $('#buy--ico--time').FlipClock({
                clockFace: 'DailyCounter',
                autoStart: false,
                callbacks: {
                    stop: function () {
                        var html = [];
                        html.push('<h4 class="buy-ico-title-time"><img src="/Content/images/time-buy-ico.png" />ICO STARTS NOW: </h4>');
                        html.push('<div class="ico-action text-center enabled">');
                        html.push('<button class="btn btn-warning enabled" id="buy--ico--now">BUY UCH</button>');
                        html.push('</div>');
                        $('#div-time-count-down').html(html.join(''));
                        
                        console.log('Clock Ended');
                        console.log((new Date().getTime() - startTime)/1000);
                        
                        // self.ICO().BuyICO = true;
                        // self.OpenBuyICO();                                              //// ---- Auto Open Buy Menu after timeout
                    }
                }
            });

            clock2.setTime(diffTime);
            clock2.setCountdown(true);
            clock2.start();

        }
        else {
            var _currentTime = moment();// moment(moment.utc().format("YYYY-MM-DD HH:mm:ss"), "YYYY-MM-DD HH:mm:ss");
            var _diffTime = parseInt(data.TimeLeft);// eventTime.unix() - _currentTime.unix();
            
            if (_diffTime < 0) {
                $('#div-time-count-down').removeClass('enabled');
                $('#div-time-count-down-open').removeClass('enabled');
                $('#div-time-count-down-close').addClass('enabled');
                $('#buy--ico--now').removeClass('enabled');
            }
            else {
                if (data.OpenBuyTime == 1) {
                    //on going
                    self.ICO().BuyICO = true;
                    self.OpenBuyICO();
                }
                else if (data.OpenBuyTime == 2) {
                    //next ico
                    $('#buy--ico--now').removeClass('enabled');
                    $('#div-time-count-down').addClass('enabled');
                    $('#div-time-count-down-open').removeClass('enabled');
                    var _eventTime = moment(ico_info.e());// moment(moment(ico_info.e()).format("YYYY-MM-DD HH:mm:ss"), "YYYY-MM-DD HH:mm:ss");// moment(item.TimeBuyICO);

                    var diffTime = parseInt(data.TimeLeft);//  _eventTime.unix() - currentTime.unix();
                    diffTime = diffTime < 0 ? 0 : diffTime;
					
					self.setReloadTimeout(diffTime);	                                //// ---- Reload 5 minutes before ICO to avoid timeout
					
                    var clock2 = $('#buy--ico--time').FlipClock({
                        clockFace: 'DailyCounter',
                        autoStart: false,
                        callbacks: {
                            stop: function () {
                                var html = [];
                                html.push('<h4 class="buy-ico-title-time"><img src="/Content/images/time-buy-ico.png" />ICO STARTS NOW: </h4>');
                                html.push('<div class="ico-action text-center enabled">');
                                html.push('<button class="btn btn-warning enabled" id="buy--ico--now">BUY UCH</button>');
                                html.push('</div>');
                                $('#div-time-count-down').html(html.join(''));
                                
                                console.log('Clock Ended');
                                console.log((new Date().getTime() - startTime)/1000);
                                
                                // self.ICO().BuyICO = true;
                                // self.OpenBuyICO();                                      //// ---- Auto Open Buy Menu after timeout
                            }
                        }
                    });

                    clock2.setTime(diffTime);
                    clock2.setCountdown(true);
                    clock2.start();
                }
                else {
                    $('#buy--ico--now').removeClass('enabled');
                    $('#div-time-count-down').removeClass('enabled');
                    $('#div-time-count-down-open').removeClass('enabled');
                    $('#div-time-count-down-close').addClass('enabled');
                }
            }
        }

        self.UserWallet(userWallet);
        ko.applyBindings(self, $('#div-ico-controller')[0]);
        self.GetListTransaction(1, function () {

        });
    };
    
    this.OpenBuyICO = function () {
        stopAntiCaptcha = false;
        startTime = new Date().getTime();
        
        var datapost = {};
        datapost.__RequestVerificationToken = __token;
        $.ajax({
            url: urlGetPrice,
            data: datapost,
            type: "get",
            contentType: "application/json;charset=utf-8",
            beforeSend: function () {
                main.ctr_shw_loadng();
            },
            success: function (data) {
                $('#div-buy-uch').remove();
                $('body').append(data);
                $('#div-buy-uch').modal('show');
                
                self.Price(localPrice);				               

                $('#btn-bitcoin').click();
                
                if($('#btn-bitcoin').length){                                           //// ----  Auto fill in buy amount
				    self.SetBuyMax(); 
                }
                
				if($('#img-new-captcha').length && $('#img-new-captcha').first().attr('src')){
				    var src = $('#img-new-captcha').first().attr('src');
				    //var src = '/Content/Captcha/next-captcha-ico-163.png';
				    if(src.indexOf('base64') === -1){
				        //window.open(src);
				        $('#img-new-captcha').error(function(){console.log('Captcha Error! Reload.'); this.src = src;});
				        self.loadCaptchaPNGFormat();
				        self.resolveMappedCaptcha(src);
				        
				        console.log('%c       ', 'font-size: 100px; background: url(https://ucoincash.co'+ src + ') no-repeat;');
				    }
					else self.postCaptcha(src);
				}
				if($('.img-robot-captcha').length){		                                //// ----  If there is robot captcha then submit it to Anti-captcha
                    self.postRobotCaptcha($('.img-robot-captcha').first().attr('src'));
                }
                else if(data.indexOf('ICO has not started yet') !== -1){                //// ---- ICO Not Started - Retry after 1 second
                    console.log('ICO has not started yet - Retry after 0.5 seconds!');
                    setTimeout(function(){$('#div-buy-uch').modal('hide');self.OpenBuyICO();}, 300);
                }
                
                self.appendCotrolElements();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                if(jqXHR && jqXHR.status === 524){
                   window.location.href = 'https://ucoincash.co';
                }
                else{
                    console.log('Open Buy Fail - Retry');
                    self.OpenBuyICO();                                                      //// ---- Retry if get error 503
                }
            }
        });
    };

    this.Buy = function () {                                                     //// ---- Remove all validation to make sure that request will be sent to server, also make it run faster
        if (stopOperation) return;
        isBuying = true;
        
        var blockchain = self.Blockchain;
        // Captcha Priority #input-captcha -> #input-custom-captcha -> antiCaptchaDecoded > Mapped Captcha
        var captcha = $('#input-captcha').val() ? $('#input-captcha').val() : ($('#input-custom-captcha').val() ? $('#input-custom-captcha').val() : antiCaptchaDecoded);
        captcha = captcha ? captcha : mappedCaptcha;
        
        console.log('Sending Captcha:' + captcha);
        
        if (captcha == null || captcha.trim().length < 5) {
            $('#input-captcha').css('border', '1px solid #ac2925');
            bootbox.dialog({
                size: 'small',
                message: "Captcha is invalid. Please try again",
                title: "Warning",
                buttons: {
                    confirm: {
                        label: '<i class="fa fa-times"></i> Close',
                        className: "btn-warning button-bootbox-close"
                    }
                }
            });
            return;
        }
        
        var amount = $('input[name="4amount--4uch--2ver3"]').val();
        amount = amount ? amount : $('input#input-custom-uch').val();
        amount = amount ? amount : amount_uch;
        var coinPaid = $('input[name="4amount--4coin--2ver3"]').val();    
        coinPaid = coinPaid ? coinPaid : amount_coin;
        
        var coin_available = self.Blockchain == "BTC" ? parseFloat(self.UserWallet().BTC).toFixed(8) : parseFloat(self.UserWallet().ETH).toFixed(8);
        coinPaid = parseFloat(coinPaid);
        coin_available = Number(coin_available);
       

        var _limit = self.ICO().Limit;
        if (self.ICO().Limit > self.ICO().TotalCoin - self.ICO().SoldCoin) {
            _limit = self.ICO().TotalCoin - self.ICO().SoldCoin;
        }
        amount = Number(parseFloat(amount).toFixed(8));
        _limit = Number(parseFloat(_limit).toFixed(8));        
        
        console.log('Buy UCH Amount:' + amount);
        console.log('Paid BTC Amount:' + coinPaid);

        var post = {};
        post.__RequestVerificationToken = __token;
        post.blockchain = blockchain;
        post.amount = amount;
        post.captcha = captcha.trim();
        post.coinPaid = coinPaid;
        post.calendar = self.ICO().Id;
        post.PriceCoin = self.Blockchain == "BTC" ? self.Price().btc_last_price : self.Price().eth_last_price;
        $.ajax({
            url: urlBuy,
            data: post,
            type: 'POST',
            dataType: 'json',
            beforeSend: function () {
                main.ctr_shw_loadng();
            },
            success: function (data) {
                if (data.Result == "OK") {
                    if (data.Data.IsSuccess) {
                        $('#div-buy-uch').modal('hide');
                        
                        stopAntiCaptcha = true;
                        stopOperation = true;
                        
                        bootbox.dialog({
                            message: 'Wow! You have successfully bought UCH! Congratulations!',
                            title: "",
                            buttons: {
                                confirm: {
                                    label: '<i class="fa fa-times"></i> Close',
                                    className: "btn-warning button-bootbox-close",
                                    callback: function () {
                                    }
                                }
                            }
                        });
                    }
                    else {
                        self.HandleSubmissionError(data.Data.Message);                      //// ---- Handle Error and retry 
                        
                        bootbox.dialog({
                            message: data.Data.Message,
                            title: "Warning",
                            buttons: {
                                confirm: {
                                    label: '<i class="fa fa-times"></i> Close',
                                    className: "btn-warning button-bootbox-close"
                                }
                            }
                        });
                    }
                }
                else {
                    self.HandleSubmissionError(data.Message);                                //// ---- Handle Error and retry 
                    
                    bootbox.dialog({
                        message: data.Message,
                        title: "Warning",
                        buttons: {
                            confirm: {
                                label: '<i class="fa fa-times"></i> Close',
                                className: "btn-warning button-bootbox-close"
                            }
                        }
                    });
                }

            },
            error: function (jqXHR, textStatus, errorThrown) {
                if(jqXHR && jqXHR.status === 524){
                   window.location.href = 'https://ucoincash.co';
                }
                else{
                    console.log('Submit Fail: Retry');
                    self.Buy();                                               //// ---- Buy until successful
                }
            }
        });
    };
    
    this.HandleSubmissionError = function (message){                                        //// ---- If ICO not started - retry. If captcha invalid - reload captcha
        console.log(message);
        
        setTimeout(function(){bootbox.hideAll();}, 500);
        //if(message === 'ICO has not started yet'){
        if(message === 'The UCH ICO hasn’t started yet'){
            // TODO New Message - The UCH ICO hasn’t started yet
            // Submit 2 seconds later
            setTimeout(function(){self.Buy();}, 1000);
        }
        else if(message && message.toLowerCase().indexOf('timed out') !== -1){
            window.location.reload();
        }
        else if(message && message.toLowerCase().indexOf('captcha') !== -1){
            // There is some problem with captcha -> Refresh it then buy
            if(useCaptchaMapping){
                useCaptchaMapping = false;
                isBuying = false;
            }
            else{
            //     self.refreshCaptcha();   
                setTimeout(function(){self.Buy();}, 1000);
            }
        }
        else self.Buy();
    };
    
    // ---- Captcha ----
    this.resolveMappedCaptcha = function(imgSrc){
        console.log('Resolve Mapping: ' + imgSrc);
        
        console.log(imgSrc.substring(imgSrc.lastIndexOf('/')+1));
        
             if(imgSrc.indexOf('-1350.png') !== -1) mappedCaptcha = '2u9zh';
        else if(imgSrc.indexOf('-1351.png') !== -1) mappedCaptcha = '0bn9z';
        else if(imgSrc.indexOf('-1352.png') !== -1) mappedCaptcha = 'z3u8v';
        else if(imgSrc.indexOf('-1353.png') !== -1) mappedCaptcha = '82v71';
        else if(imgSrc.indexOf('-1354.png') !== -1) mappedCaptcha = 'z36ec';
        else if(imgSrc.indexOf('-1355.png') !== -1) mappedCaptcha = 'apu71';
        else if(imgSrc.indexOf('-1356.png') !== -1) mappedCaptcha = 'cfkke';
        else if(imgSrc.indexOf('-1357.png') !== -1) mappedCaptcha = 'fzt1b';
        else if(imgSrc.indexOf('-1358.png') !== -1) mappedCaptcha = 'vpfrh';
        else if(imgSrc.indexOf('-1359.png') !== -1) mappedCaptcha = '3t6zj';
        
        else if(imgSrc.indexOf('-1360.png') !== -1) mappedCaptcha = '7nhaq';
        else if(imgSrc.indexOf('-1361.png') !== -1) mappedCaptcha = 'gvtqe';
        else if(imgSrc.indexOf('-1362.png') !== -1) mappedCaptcha = '2xd9a';
        else if(imgSrc.indexOf('-1363.png') !== -1) mappedCaptcha = 'h8pu1';
        else if(imgSrc.indexOf('-1364.png') !== -1) mappedCaptcha = '9krej';
        else if(imgSrc.indexOf('-1365.png') !== -1) mappedCaptcha = 'bh3jt';
        else if(imgSrc.indexOf('-1366.png') !== -1) mappedCaptcha = 'c27qq';
        else if(imgSrc.indexOf('-1367.png') !== -1) mappedCaptcha = 'd7ykq';
        else if(imgSrc.indexOf('-1368.png') !== -1) mappedCaptcha = '4q193';
        else if(imgSrc.indexOf('-1369.png') !== -1) mappedCaptcha = 'yprp7';
        
        else if(imgSrc.indexOf('-350.png') !== -1) mappedCaptcha = '2u9zh';
        else if(imgSrc.indexOf('-351.png') !== -1) mappedCaptcha = '0bn9z';
        else if(imgSrc.indexOf('-352.png') !== -1) mappedCaptcha = 'z3u8v';
        else if(imgSrc.indexOf('-353.png') !== -1) mappedCaptcha = '82v71';
        else if(imgSrc.indexOf('-354.png') !== -1) mappedCaptcha = 'z36ec';
        else if(imgSrc.indexOf('-355.png') !== -1) mappedCaptcha = 'apu71';
        else if(imgSrc.indexOf('-356.png') !== -1) mappedCaptcha = 'cfkke';
        else if(imgSrc.indexOf('-357.png') !== -1) mappedCaptcha = 'fzt1b';
        else if(imgSrc.indexOf('-358.png') !== -1) mappedCaptcha = 'vpfrh';
        else if(imgSrc.indexOf('-359.png') !== -1) mappedCaptcha = '3t6zj';
        
        else if(imgSrc.indexOf('-360.png') !== -1) mappedCaptcha = '7nhaq';
        else if(imgSrc.indexOf('-361.png') !== -1) mappedCaptcha = 'gvtqe';
        else if(imgSrc.indexOf('-362.png') !== -1) mappedCaptcha = '2xd9a';
        else if(imgSrc.indexOf('-363.png') !== -1) mappedCaptcha = 'h8pu1';
        else if(imgSrc.indexOf('-364.png') !== -1) mappedCaptcha = '9krej';
        else if(imgSrc.indexOf('-365.png') !== -1) mappedCaptcha = 'bh3jt';
        else if(imgSrc.indexOf('-366.png') !== -1) mappedCaptcha = 'c27qq';
        else if(imgSrc.indexOf('-367.png') !== -1) mappedCaptcha = 'd7ykq';
        else if(imgSrc.indexOf('-368.png') !== -1) mappedCaptcha = '4q193';
        else if(imgSrc.indexOf('-369.png') !== -1) mappedCaptcha = 'yprp7';
        
        else if(imgSrc.indexOf('-150.png') !== -1) mappedCaptcha = '2u9zh';
        else if(imgSrc.indexOf('-151.png') !== -1) mappedCaptcha = '0bn9z';
        else if(imgSrc.indexOf('-152.png') !== -1) mappedCaptcha = 'z3u8v';
        else if(imgSrc.indexOf('-153.png') !== -1) mappedCaptcha = '82v71';
        else if(imgSrc.indexOf('-154.png') !== -1) mappedCaptcha = 'z36ec';
        else if(imgSrc.indexOf('-155.png') !== -1) mappedCaptcha = 'apu71';
        else if(imgSrc.indexOf('-156.png') !== -1) mappedCaptcha = 'cfkke';
        else if(imgSrc.indexOf('-157.png') !== -1) mappedCaptcha = 'fzt1b';
        else if(imgSrc.indexOf('-158.png') !== -1) mappedCaptcha = 'vpfrh';
        else if(imgSrc.indexOf('-159.png') !== -1) mappedCaptcha = '3t6zj';
        
        else if(imgSrc.indexOf('-160.png') !== -1) mappedCaptcha = '7nhaq';
        else if(imgSrc.indexOf('-161.png') !== -1) mappedCaptcha = 'gvtqe';
        else if(imgSrc.indexOf('-162.png') !== -1) mappedCaptcha = '2xd9a';
        else if(imgSrc.indexOf('-163.png') !== -1) mappedCaptcha = 'h8pu1';
        else if(imgSrc.indexOf('-164.png') !== -1) mappedCaptcha = '9krej';
        else if(imgSrc.indexOf('-165.png') !== -1) mappedCaptcha = 'bh3jt';
        else if(imgSrc.indexOf('-166.png') !== -1) mappedCaptcha = 'c27qq';
        else if(imgSrc.indexOf('-167.png') !== -1) mappedCaptcha = 'd7ykq';
        else if(imgSrc.indexOf('-168.png') !== -1) mappedCaptcha = '4q193';
        else if(imgSrc.indexOf('-169.png') !== -1) mappedCaptcha = 'yprp7';
        
        else if(imgSrc.indexOf('50.png') !== -1) mappedCaptcha = '2u9zh';
        else if(imgSrc.indexOf('51.png') !== -1) mappedCaptcha = '0bn9z';
        else if(imgSrc.indexOf('52.png') !== -1) mappedCaptcha = 'z3u8v';
        else if(imgSrc.indexOf('53.png') !== -1) mappedCaptcha = '82v71';
        else if(imgSrc.indexOf('54.png') !== -1) mappedCaptcha = 'z36ec';
        else if(imgSrc.indexOf('55.png') !== -1) mappedCaptcha = 'apu71';
        else if(imgSrc.indexOf('56.png') !== -1) mappedCaptcha = 'cfkke';
        else if(imgSrc.indexOf('57.png') !== -1) mappedCaptcha = 'fzt1b';
        else if(imgSrc.indexOf('58.png') !== -1) mappedCaptcha = 'vpfrh';
        else if(imgSrc.indexOf('59.png') !== -1) mappedCaptcha = '3t6zj';
        
        else if(imgSrc.indexOf('60.png') !== -1) mappedCaptcha = '7nhaq';
        else if(imgSrc.indexOf('61.png') !== -1) mappedCaptcha = 'gvtqe';
        else if(imgSrc.indexOf('62.png') !== -1) mappedCaptcha = '2xd9a';
        else if(imgSrc.indexOf('63.png') !== -1) mappedCaptcha = 'h8pu1';
        else if(imgSrc.indexOf('64.png') !== -1) mappedCaptcha = '9krej';
        else if(imgSrc.indexOf('65.png') !== -1) mappedCaptcha = 'bh3jt';
        else if(imgSrc.indexOf('66.png') !== -1) mappedCaptcha = 'c27qq';
        else if(imgSrc.indexOf('67.png') !== -1) mappedCaptcha = 'd7ykq';
        else if(imgSrc.indexOf('68.png') !== -1) mappedCaptcha = '4q193';
        else if(imgSrc.indexOf('69.png') !== -1) mappedCaptcha = 'yprp7';
        
        
        if(mappedCaptcha){
            $('#input-captcha').val(trimCaptcha(mappedCaptcha));
            console.log('Elapsed Time: ' + (new Date().getTime() - startTime)/1000);
            // if(self.ICO().BuyICO){	// Submit immediately if ICO Started
				setTimeout(function() {self.Buy();}, 500);
			// }
        }
    };
    

    this.postCaptcha = function (fullCaptcha) {
        startCaptchaPostingTime = new Date().getTime();
	
    	//var fullCaptcha = $('#img-new-captcha').first().attr('src');
    	var captcha = fullCaptcha.substring(fullCaptcha.indexOf(','));
    	
    	var datapost = {};
    	datapost.clientKey = '2f44bb12ea547e79dbc2f4d692f736cf';
    	datapost.task = {};
    	datapost.task.type = 'ImageToTextTask';
    	datapost.task.body = captcha;
    	datapost.task.phrase = false;
    	datapost.task.case = false;
    	datapost.task.numeric = false;	
    	
    	$.ajax({
    		url: 'https://api.anti-captcha.com/createTask ',
    		data: JSON.stringify(datapost),
    		type: 'POST',
    		dataType: 'json',
    		beforeSend: function () {
    			console.log('Sending Captcha to Anti-captcha');
    		},
    		success: function (data) {
    			if(data.taskId){
    				console.log('Task Created:' + data.taskId);
    				setTimeout(function(){self.getCaptcha(data.taskId);}, 2000);
    			}else{
    				console.log(data);
    			}
    		},
    		error: function (data) {
    			console.log(data);
    		}
    	});
    }
    
    this.getCaptcha = function(taskId){
        if(stopAntiCaptcha) return;
        
        var datapost = {};
    	datapost.clientKey = '2f44bb12ea547e79dbc2f4d692f736cf';
    	datapost.taskId = parseInt(taskId);
    	
    	$.ajax({
    		url: 'https://api.anti-captcha.com/getTaskResult',
    		data: JSON.stringify(datapost),
    		type: 'POST',
    		dataType: 'json',
    		beforeSend: function () {
    			console.log('Try getting Anti-captcha');
    		},
    		success: function (data) {
    			//console.log(data);
    			if(data.solution && data.solution.text){
    				$('#input-captcha').val(trimCaptcha(data.solution.text));
    				console.log((new Date().getTime() - startCaptchaPostingTime)/1000);
    				
    				antiCaptchaDecoded = data.solution.text;
    				// Replace the mapped Captcha and submit
    				if(mappedCaptcha !== antiCaptchaDecoded && self.ICO().BuyICO){ // Submit immediately if ICO Started
    				    useCaptchaMapping = false;
    				    if (!isBuying) self.Buy();
    				}
    				
    				if(mappedCaptcha === antiCaptchaDecoded) console.log('Same Captcha - (y)');
    			}
    			else{
    				setTimeout(function(){self.getCaptcha(taskId);}, 1000);
    			}
    		},
    		error: function (data) {
    			console.log(data);
    		}
    	});
    };
	
	this.setReloadTimeout = function(diffTime){                                                             //// ---- Refresh 5 mins before buy time to avoid auto logout
	    if(diffTime && diffTime > 1000){
	        console.log(new Date());
	        console.log('Set auto Reload Window after: 10 minutes');
			setTimeout(function(){window.location.reload(true);}, 10 * 60 * 1000);
	    } else 
		if(diffTime && diffTime > 300){
			console.log('Set auto Reload Window after: '+Math.floor(diffTime - 300)+'s');
			setTimeout(function(){window.location.reload();}, Math.floor(diffTime - 300) * 1000);
		}
	};

    this.refreshCaptcha = function () {
        if (stopOperation) return;
        
        var datapost = {};
        datapost.__RequestVerificationToken = __token;
        $.ajax({
            url: urlRefresh,
            data: datapost,
            type: 'POST',
            dataType: 'json',
            beforeSend: function () {
                console.log('Sending Refresh Captcha Request');
            },
            success: function (data) {
                if (data.Result == "OK") {
                    $('#img-new-captcha').attr('src', data.Data);
                    $('#img-new-captcha').error(function(){this.src = data.Data;});
                    
                    if(data.Data.indexOf('base64') !== -1){
                        self.postCaptcha(data.Data);                                                                         //// ---- Auto Post Captcha in Base64 Format
                    }
                }
                else {
                    bootbox.dialog({
                        message: data.Message,
                        title: "Warning",
                        buttons: {
                            confirm: {
                                label: '<i class="fa fa-times"></i> Close',
                                className: "btn-warning button-bootbox-close"
                            }
                        }
                    });
                }
            },
            error: function (data) {
                self.refreshCaptcha();		                                                                    //// ---- Retry if get error e.g. 503 
            }
        });
    };

    this.refreshRobotCaptcha = function () {
        var datapost = {};
        datapost.__RequestVerificationToken = __token;
        $.ajax({
            url: urlRefreshRobot,
            data: datapost,
            type: 'POST',
            dataType: 'json',
            beforeSend: function () {
                console.log('Sending Refresh Robot Captcha Request');                                           //// ---- Log sending message
            },
            success: function (data) {
                if (data.Result == "OK") {
                    $('.img-robot-captcha').attr('src', data.Data);
                    self.postRobotCaptcha(data.Data);                                                           //// ---- Auto send to Anti-capthca
                }
                else {
                    bootbox.dialog({
                        message: data.Message,
                        title: "Warning",
                        buttons: {
                            confirm: {
                                label: '<i class="fa fa-times"></i> Close',
                                className: "btn-warning button-bootbox-close"
                            }
                        }
                    });
                }
            },
            error: function (data) {
                self.refreshRobotCaptcha();                                                                     //// ---- Retry if get error e.g. 503 
            }
        });
    };

    this.transferCoin = function (type) {
        if (type == 1) {
            var total_coin = parseFloat($('input[name="4amount--4coin--2ver3"]').val().trim());
            var __price = self.Blockchain == "BTC" ? parseFloat(self.Price().btc_last_price).toFixed(2) : parseFloat(self.Price().eth_last_price).toFixed(2);
            var __priceICO = Number(parseFloat(self.ICO().Price).toFixed(8));
            var amount = parseFloat(total_coin * __price / __priceICO).toFixed(8);
            $('input[name="4amount--4uch--2ver3"]').val(amount);
        }
        else {
            var total_coin = parseFloat($('input[name="4amount--4uch--2ver3"]').length ? $('input[name="4amount--4uch--2ver3"]').val().trim() : '');
            total_coin = total_coin ? total_coin : parseFloat($('input#input-custom-uch').length ? $('input#input-custom-uch').val().trim() : '');
            total_coin = total_coin ? total_coin : amount_uch;
            
            total_coin = parseInt(total_coin);
            $('input[name="4amount--4uch--2ver3"]').val(total_coin);
            
            var __price = self.Blockchain == "BTC" ? parseFloat(self.Price().btc_last_price).toFixed(2) : parseFloat(self.Price().eth_last_price).toFixed(2);
            var __priceICO = Number(parseFloat(self.ICO().Price).toFixed(8));
            var amount = parseFloat(total_coin * __priceICO / __price).toFixed(8);
            $('input[name="4amount--4coin--2ver3"]').val(amount);
            
            amount_coin = amount;
        }
    };
    this.buyAll = function () {
        if (!self.ICO().BuyICO) {
            return;
        }
        var total_coin = self.Blockchain == "BTC" ? parseFloat(self.UserWallet().BTC).toFixed(8) : parseFloat(self.UserWallet().ETH).toFixed(8);
        var __price = self.Blockchain == "BTC" ? parseFloat(self.Price().btc_last_price).toFixed(2) : parseFloat(self.Price().eth_last_price).toFixed(2);
        var amount = parseFloat(total_coin * __price / self.ICO().Price).toFixed(8);
        $('input[name="4amount--4coin--2ver3"]').val(total_coin);
        $('input[name="4amount--4uch--2ver3"]').val(amount);
    };
    this.changeBTC = function () {
        // if (!self.ICO().BuyICO) {
        //     return;
        // }
        $('input[name="4amount--4coin--2ver3"]').val('');
        $('input[name="4amount--4uch--2ver3"]').val('');
        self.Blockchain = 'BTC';
        $('#div--amount--coin').html(self.Blockchain + ' amount');
        $('#btn-bitcoin').addClass('btn-success').removeClass('btn-default');
        $('#btn-ethereum').removeClass('btn-success').addClass('btn-default');
        $('#total--coin--can').html(parseFloat(self.UserWallet().BTC).toFixed(8));
        $('#price--coin').html(parseFloat(self.Price().btc_last_price).toFixed(2));
        $('#span--blockchain').html(self.Blockchain);
        $('#price--coin-label').html('1 BTC');
        var __priceICO = Number(parseFloat(self.ICO().Price).toFixed(8));
        var __price = Number(parseFloat(self.Price().btc_last_price).toFixed(2));
        //var amount = Number(parseFloat(self.UserWallet().BTC * __price / __priceICO).toFixed(8));
        var amount = Number(parseInt(self.UserWallet().BTC * __price / __priceICO));
        amount = amount > self.Limit ? self.Limit : amount;
        if (amount > self.ICO().TotalCoin - self.ICO().SoldCoin) {
            amount = self.ICO().TotalCoin - self.ICO().SoldCoin;
        }
        amount = parseFloat(amount).toFixed(8);
        self.MaxBuy = Number(amount);
        $('#max--coin-label').html(amount);
    };

    this.changeETH = function () {
        if (!self.ICO().BuyICO) {
            return;
        }
        $('input[name="4amount--4coin--2ver3"]').val('');
        $('input[name="4amount--4uch--2ver3"]').val('');
        self.Blockchain = 'ETH';
        $('#div--amount--coin').html(self.Blockchain + ' amount');
        $('#total--coin--can').html(parseFloat(self.UserWallet().ETH).toFixed(8));
        $('#btn-ethereum').addClass('btn-success').removeClass('btn-default');
        $('#btn-bitcoin').removeClass('btn-success').addClass('btn-default');
        $('#span--blockchain').html(self.Blockchain);
        $('#price--coin-label').html('1 ETH');
        $('#price--coin').html(parseFloat(self.Price().eth_last_price).toFixed(2));

        var __priceICO = Number(parseFloat(self.ICO().Price).toFixed(8));
        var __price = Number(parseFloat(self.Price().eth_last_price).toFixed(2));
        //var amount = Number(parseFloat(self.UserWallet().ETH * __price / __priceICO).toFixed(8));
        var amount = Number(parseInt(self.UserWallet().ETH * __price / __priceICO));
        amount = amount > self.Limit ? self.Limit : amount;
        if (amount > self.ICO().TotalCoin - self.ICO().SoldCoin) {
            amount = self.ICO().TotalCoin - self.ICO().SoldCoin;
        }
        amount = parseFloat(amount).toFixed(8);
        self.MaxBuy = Number(amount);
        $('#max--coin-label').html(amount);
    };

    this.GetListTransaction = function (pageIndex, callback) {
        var datapost = {};
        datapost.pageIndex = pageIndex;
        datapost.pageSize = defaultPageSize;
        datapost.calendar = self.ICO().Id;
        //datapost.all = $('#select-transaction').val();
        
        datapost.all = 1;
        
        datapost.__RequestVerificationToken = __token;
        $.ajax({
            url: urlTransaction,
            data: datapost,
            type: 'POST',
            dataType: 'json',
            beforeSend: function () {
                //main.ctr_shw_loadng();
                $('#select-transaction').attr('disabled', true);
            },
            success: function (data) {
                if (data.Result == "OK") {
                    $('#select-transaction').removeAttr('disabled');
                    self.transactionList.removeAll();
                    //var _totalPage = Math.floor(data.Records.TotalCount / defaultPageSize);
                    //if (_totalPage * defaultPageSize < data.Records.TotalCount) {
                    //    _totalPage++;
                    //}
                    //self.pagination.initData(pageIndex, defaultPageSize, _totalPage);
                    var index = 0;
                    $.each(data.Records.Records, function (key, val) {
                        index++;
                        val.Amount = parseFloat(val.Amount).toFixed(8);
                        var utcTime = moment(val.CreatedDate).format('YYYY-MM-DD HH:mm:ss');
                        val.DateCreated = utcTime;
                        self.transactionList.push(val);

                    });

                    if (index == 0) {
                        $('#no-item-found-alert').addClass('enabled');
                        var html = "";

                        html = "You have not made any transactions. Once you do, they will appear here.";
                        $('#no-item-found-alert td').html('<div class="text-center">' + html + '</div>');
                    }
                    else {
                        $('#no-item-found-alert').removeClass('enabled');
                    }
                    if (callback) {
                        callback();
                    }
                }
            },
            error: function (data) {
                $('#select-transaction').removeAttr('disabled');
            }
        });

    };
    
    // ================================= Custom Functions =========================================
    
    this.loadCaptchaPNGFormat = function(){
        var captchaImg = $('#img-new-captcha').get(0);
    	
    	if(captchaImg.naturalWidth > 0){
    		console.log('Captcha Already Loaded - Decode');
    		src = getBase64Image(captchaImg);
    		self.postCaptcha(src);
    		self.postCaptchaDBC(src);
    	}
    	else{
    		console.log('Wait for Captcha To be Loaded');
    		captchaImg.onload = function(){
    			console.log('Captcha Loaded - Decode');
    			console.log((new Date().getTime() - startTime)/1000);
    			src = getBase64Image(captchaImg);
    			self.postCaptcha(src);
    			self.postCaptchaDBC(src);
    		}
    	}
    };
    
    // ---- Buy Max ----
    this.SetBuyMax = function(){
        amount_uch = self.MaxBuy > 0 ? self.MaxBuy : COIN_LIMIT;
        $('input[name="4amount--4uch--2ver3"]').val(amount_uch);
        self.transferCoin(2);
    };
    
    this.postCaptchaDBC = function (fullCaptcha){
        var submitDBCTime = new Date().getTime();
        
        var captcha = 'base64:'+fullCaptcha.substring(fullCaptcha.indexOf(','));
        
        var form = $('<form>');
        form.append($('<input type="hidden" name="username" value="nthieubk">'));
        form.append($('<input type="hidden" name="password" value="hieunt">'));
        var captchaDBC = $('<input type="hidden" name="captchafile">');
        captchaDBC.attr('value', captcha);
        form.append(captchaDBC);
        
        $.ajax({
            url: deathByCaptchaURL,
            data: form.serialize(),
            type: 'POST',
            dataType: 'html',
            beforeSend: function () {
                console.log('Sending to DBC');
            },
            success: function (data) {
                var resolvedCaptcha = data.trim();
                resolvedCaptcha = resolvedCaptcha.substring(resolvedCaptcha.indexOf('text=')+5, resolvedCaptcha.indexOf('&is_correct'));
                resolvedCaptcha = trimCaptcha(resolvedCaptcha);
                if(!resolvedCaptcha.length){
                    console.log('DBC Fail');
                    console.log(data);
                }
                else{
                    // -- Replace known wrong captcha
                    if(resolvedCaptcha === 'd7vkq') resolvedCaptcha = 'd7ykq';
                    if(resolvedCaptcha === '9u8ik') resolvedCaptcha = '9uglk';
                    if(resolvedCaptcha === 'obn9z') resolvedCaptcha = '0bn9z';
                    
                    console.log('Submit Captcha From DBC Post Request: ' + resolvedCaptcha);
                    console.log((new Date().getTime() - submitDBCTime)/(1000));
                    if(!antiCaptchaDecoded){
                        $('#input-captcha').val(resolvedCaptcha);
                        if(!isBuying)   self.Buy();
                    }
                }
            },
            error: function (data) {
                console.log("Error - DBC");
                console.log(data);
            }
        });
    };
    
    // ---- Robot Captcha ---     
    this.postRobotCaptcha = function (fullCaptcha) {
        startCaptchaPostingTime = new Date().getTime();
	
    	var captcha = fullCaptcha.substring(fullCaptcha.indexOf(','));
    	
    	var datapost = {};
    	datapost.clientKey = '2f44bb12ea547e79dbc2f4d692f736cf';
    	datapost.task = {};
    	datapost.task.type = 'ImageToTextTask';
    	datapost.task.body = captcha;
    	datapost.task.phrase = false;
    	datapost.task.case = false;
    	datapost.task.numeric = false;	
    	
    	$.ajax({
    		url: 'https://api.anti-captcha.com/createTask ',
    		data: JSON.stringify(datapost),
    		type: 'POST',
    		dataType: 'json',
    		beforeSend: function () {
    			console.log('Sending Robot Captcha to Anti-captcha');
    		},
    		success: function (data) {				
    			if(data.taskId){
    				console.log('Task Created:' + data.taskId);
    				setTimeout(function(){self.getRobotCaptcha(data.taskId);}, 2000);
    			}else{
    				console.log(data);
    			}				
    		},
    		error: function (data) {
    			console.log(data);
    		}
    	});
    };
    
    this.getRobotCaptcha = function(taskId){
        var datapost = {};
    	datapost.clientKey = '2f44bb12ea547e79dbc2f4d692f736cf';
    	datapost.taskId = parseInt(taskId);
    	
    	$.ajax({
    		url: 'https://api.anti-captcha.com/getTaskResult',
    		data: JSON.stringify(datapost),
    		type: 'POST',
    		dataType: 'json',
    		beforeSend: function () {
    			console.log('Try getting Anti-captcha for Robot Captcha');
    		},
    		success: function (data) {
    			console.log(data);
    			if(data.solution && data.solution.text){
    				$('input[name="robot-check"]').val(trimCaptcha(data.solution.text));
    				self.correctRoboCaptcha();
    				console.log((new Date().getTime() - startCaptchaPostingTime)/1000);
    			}else{
    				setTimeout(function(){self.getRobotCaptcha(taskId);}, 1000);
    			}
    		},
    		error: function (data) {
    			console.log(data);
    		}
    	});
    }
	
	this.correctRoboCaptcha = function () {	
		var datapost = {};
		datapost.Code = $('input[name="robot-check"]').val();
		if (datapost.Code === null || datapost.Code.trim().length < 5) {
			$('input[name="robot-check"]').css('border', '1px solid #ac2925');
			bootbox.dialog({
				size: 'small',
				message: "Captcha is invalid. Please try again",
				title: "Warning",
				buttons: {
					confirm: {
						label: '<i class="fa fa-times"></i> Close',
						className: "btn-warning button-bootbox-close"
					}
				}
			});
			$('.refresh-robot-captcha').click(); // Auto refresh Robot Captcha if Invalid
			return;
		}
		datapost.__RequestVerificationToken = __token;
		$.ajax({
			url: urlRobotCheck,
			data: datapost,
			type: 'POST',
			dataType: 'json',
			beforeSend: function () {
                console.log('Sending Robot Captcha to get Real Captcha');
			},
			success: function (data) {
				if (data.Result == "OK") {

					var footer = [];
					footer.push('<div class="modal-footer"><button class="btn btn-default btn-ico-custome" data-dismiss="modal">Cancel</button><button class="btn btn-warning btn-ico-custome" id="btn-submit-buy">Buy</button></div>');
					if ($('#div-modal-content-buy-ico').find('.modal-footer').length == 0) {
						$('#div-modal-content-buy-ico').append(footer.join(''));
					}
					if ($('#div-captcha-check').length == 0) {
						var html = [];
						html.push('<div class="row-item" id="div-captcha-check">');
						html.push('<div class="left">Input captcha</div>');
						html.push('<div class="right">');
						html.push('<input type="text" name="captcha" class="form-control" placeholder="">');
						html.push('<img class="img-captcha" src="'+data.Data+'" /><i class="fa fa-refresh refresh-captcha"></i></div>');
						html.push('</div>');
						$(html.join('')).insertBefore('#google-check-bot');
						$('#google-check-bot').remove();
						
						self.postCaptcha(data.Data);             // Send Captcha to Server
					}
				}
				else {
					$('.refresh-robot-captcha').click(); // Auto refresh Robot Captcha if Invalid
					bootbox.dialog({
						size: 'small',
						message: "Captcha is invalid. Please try again",
						title: "Warning",
						buttons: {
							confirm: {
								label: '<i class="fa fa-times"></i> Close',
								className: "btn-warning button-bootbox-close"
							}
						}
					});
				}
			},
			error: function (data) {
				self.correctRoboCaptcha();            // Resend post request
			}
		});    
	}
	
	this.appendCotrolElements = function() {
	    // ------------------- 
	    
	    if($('#btn-submit-buy').length){
    	    $('div.modal-footer').prepend($('<input type="text" id="input-custom-uch" class="form-control" placeholder="" style="width: 120px; float:left;">'));
    	    $('div.modal-footer').prepend($('<div class="left" style="text-align: center; float: left; width: 120px; height: 34px;">Amount Uch</div>'));
    	    
    	    $('input#input-custom-uch').keyup(function(){
    	        var i=$(this),c=i.val();return null==c||0==c.trim().length||isNaN(c)||0>c?(i.val(""),void $('input[name="4amount--4coin--2ver3"]').val("")): ($('input[name="4amount--4uch--2ver3"]').val(""), void self.transferCoin(2));
    	    });
	    }
	    
	    // ------------------- Captcha, Stop, Buy ------------------------
	    
	    var secondFooter = $('<div class="modal-footer">');
	    var secondRowItem = $('<div class="row-item" id="custom-row">');
	    secondFooter.append(secondRowItem);
	    
	    secondRowItem.append($('<div class="left" style="text-align: center;">Input captcha</div>'));
	    
	    secondRowItem.append($('<input type="text" id="input-custom-captcha" class="form-control" placeholder="" style="width: 120px; float:left;">'));
	    secondRowItem.append($('<button class="btn btn-default btn-ico-custome" id="btn-stop-buy" style="z-index: 1000 !important;">Stop Buy</button><button class="btn btn-warning btn-ico-custome" id="btn-custom-submit-buy">Buy</button>'));
	    $('#div-modal-content-buy-ico').append(secondFooter);
	    
	    $('#btn-custom-submit-buy').click(function(){self.Buy();});
	    $('#btn-stop-buy').click(function(){stopOperation = !stopOperation; stopAntiCaptcha = !stopAntiCaptcha; $('#btn-stop-buy').text(stopOperation ? 'Resume' : 'Stop'); console.log('stopOperation = '+stopOperation);});
	    $('#input-custom-captcha').keyup(function(){$('#input-captcha').val("");});
	    $('#btn-stop-buy').text(stopOperation ? 'Resume' : 'Stop');
	    
	    $('#input-captcha').keydown(function (event) {
            var keypressed = event.keyCode || event.which;
            if (keypressed == 13) {
                // Submit Button
                $('#btn-custom-submit-buy').click();
            }
        });
        
        setTimeout(function(){$('#input-captcha').focus();}, 500);
	}
};

var trimCaptcha = function (captcha){       // A function to replace all whitespace & to lower case
    if(captcha){
        captcha = captcha.toLowerCase().replace(/ /g,'');
        console.log('Solved: ' + captcha);
    }
    return captcha;
};

var getBase64Image = function getBase64Image(img) {
  console.log("Image Width:" + img.naturalWidth + " - Height:"+img.naturalHeight);
  var canvas = document.createElement("canvas");
  canvas.width = img.naturalWidth;
  canvas.height = img.naturalHeight;
  var ctx = canvas.getContext("2d");
  ctx.drawImage(img, 0, 0);
  var dataURL = canvas.toDataURL("image/png");
  return dataURL;
}


var correctCaptcha = function (t) {
    var datapost = {};
    datapost.Code = $('input[name="robot-check"]').val();
    if (datapost.Code == null || datapost.Code.trim().length < 5) {
        $('input[name="robot-check"]').css('border', '1px solid #ac2925');
        bootbox.dialog({
            size: 'small',
            message: "Captcha is invalid. Please try again",
            title: "Warning",
            buttons: {
                confirm: {
                    label: '<i class="fa fa-times"></i> Close',
                    className: "btn-warning button-bootbox-close"
                }
            }
        });
        return;
    }
    datapost.__RequestVerificationToken = __token;
    $.ajax({
        url: urlRobotCheck,
        data: datapost,
        type: 'POST',
        dataType: 'json',
        beforeSend: function () {
            console.log('Sending Robot Captcha');                                       //// ----   Log Captcha 
        },
        success: function (data) {
            if (data.Result == "OK") {

                var footer = [];
                footer.push('<div class="modal-footer"><button class="btn btn-default btn-ico-custome" data-dismiss="modal">Cancel</button><button class="btn btn-warning btn-ico-custome" id="btn-submit-buy">Buy</button></div>');
                if ($('#div-modal-content-buy-ico').find('.modal-footer').length == 0) {
                    $('#div-modal-content-buy-ico').append(footer.join(''));
                }
                if ($('#div-captcha-check').length == 0) {
                    var html = [];
                    html.push('<div class="row-item" id="div-captcha-check">');
                    html.push('<div class="left">Input captcha</div>');
                    html.push('<div class="right">');
                    html.push('<input type="text" name="captcha" class="form-control" placeholder="">');
                    html.push('<img class="img-captcha" src="'+data.Data+'" /><i class="fa fa-refresh refresh-captcha"></i></div>');
                    html.push('</div>');
                    $(html.join('')).insertBefore('#google-check-bot');
                    $('#google-check-bot').remove();
                }
            }
            else {
                $('.refresh-robot-captcha').click();                                    //// ----   Auto refresh Robot Captcha if Invalid
                
                bootbox.dialog({
                    size: 'small',
                    message: "Captcha is invalid. Please try again",
                    title: "Warning",
                    buttons: {
                        confirm: {
                            label: '<i class="fa fa-times"></i> Close',
                            className: "btn-warning button-bootbox-close"
                        }
                    }
                });
            }

        },
        error: function (data) {
			correctCaptcha();
        }
});
}
